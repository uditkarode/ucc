#!/bin/bash

#   Copyright 2019 Udit Karode
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
NC='\033[0m'
ROOT_FILE=~/.__ucc_ws
VERSION='2.8'

#We need the dependencies pre-installed
function check_installed() {
	if [ -z "$(which ${1})" ] && [ ! -f "/bin/${1}" ]; then
    		echo -e "${RED}FATAL ERROR${NC}: ${1} executable not found."; exit
	fi
}

#A workspace needs to be defined to work on
function check_ws_defined() {
	if [ -f "$ROOT_FILE" ]; then
  		root=$(cat $ROOT_FILE)
	else
    		echo -e "${RED}FATAL ERROR${NC}: The workspace is undefined. To define the workspace folder, use the -w/--workspace flag."
    		exit
	fi
}

function show_help(){
    	echo -e "Usage: ucc [option] [argument]\n"
	echo -e "${GREEN}-b/--build ${YELLOW}<filename>${NC} : Builds the file $root/sources/<filename>, and places a DOS executable in $root/builds/."
	echo
	echo -e "${GREEN}-r/--run ${YELLOW}<filename>${NC} : Runs the filename, if present, from $root/builds/."
	echo
	echo -e "${GREEN}-br/--build-run ${YELLOW}<filename>${NC} : Builds the filename from $root/sources, and if successful, runs the build seamlessly."
	echo
	echo -e "${GREEN}-i/--init/init ${YELLOW} <folder-path>${NC} : Initiates a UCC workspace at the provided folder path. This does ${RED}NOT${NC} also automatically make it the workspace."
	echo
	echo -e "${GREEN}-s/--specific ${YELLOW}<filename>${NC} : Builds the filename from the directory of execution."
    	echo
	echo -e "${GREEN}-sr/--specific-run ${YELLOW}<filename>${NC} : Builds the filename from the directory of execution, and if successful, runs the build seamlessly."
   	echo
	echo -e "${GREEN}-w/--workspace ${YELLOW}<folder-path>${NC} : Sets the workspace directory of UCC"
   	echo
	echo -e "${GREEN}-v/--version${NC} : Prints the installed version of UCC."
	echo
	echo -e "${GREEN}-p/--boilerplate ${YELLOW}<filename without .cpp>${NC} : Creates ${YELLOW}<filename>${NC}.cpp with the basic header files included and a main function with always-required code."
	echo
	echo -e "${GREEN}-e/--edit-run ${YELLOW}<filename without .cpp>${NC} : Opens ${YELLOW}<filename>${NC}.cpp in vim and runs it as soon as you exit vim."
	echo
	exit
}


function inv_params() {
	echo -e "${RED}Invalid parameters${NC}. Use the flag ${GREEN}--help${NC} for usage instructions."
}

check_installed dosbox


case "$#" in
	"0")
		show_help
	;;

	"1")
		case "$1" in
			"-h"|"--help")
				show_help
			;;

			"-w"|"--workspace")
				check_ws_defined
				echo "Workspace is set to: $(cat ~/.__ucc_ws)"
			;;

			"-v"|"--version")
				echo -e "${YELLOW}INFO: ${NC}UCC v${GREEN}${VERSION}${NC}"
				echo -e "  ${YELLOW}╦ ╦╔═╗╔═╗\n  ║ ║║  ║  \n  ╚═╝╚═╝╚═╝${NC}"
			;;

			"-u"|"--update")
				check_installed wget ; check_installed curl
				if [ ! "$(curl -s https://uditkarode.github.io/ucc/version)" = ${VERSION} ]; then
					if [ "$EUID" -ne 0 ]; then
						echo -e "${YELLOW}INFO: The update function needs superuser privileges.${NC}"
						sudo echo "Superuser privileges granted."
					fi
					
					if [ -f "/tmp/ucc" ]; then
						sudo rm /tmp/ucc
					fi
					
					cd /tmp
					sudo wget -q https://raw.githubusercontent.com/uditkarode/ucc/master/ucc
					
					if [ -f "/tmp/ucc" ]; then
						echo;
						echo -e "${GREEN}Update successful!${NC}"
						echo
						sudo chmod +x ucc
						sudo mv ucc /bin/ucc
					else
						echo -e "${RED}Update failed! Check your internet connection.${NC}"
					fi
					
				else
					echo -e "${GREEN}You are already on the latest version of UCC.${NC}"
				fi
			;;

			"-i"|"--init"|"init")
				check_installed git
				echo -e "${YELLOW}INFO: This will initiate a UCC workspace in the current directory."
				echo -e "${NC}Continue? (${GREEN}yes${NC}/${RED}no${NC})" ; read userconf

				if [ "$userconf" != "yes" ] && [ "$userconf" != "y" ]; then
					echo -e "${RED}Aborting.${NC}"
					exit
				fi
				if [ -d "/var/BIN" ]; then
					echo "Copying BIN from cached /var/BIN"
					cp /var/BIN .
				else
					git clone https://github.com/uditkarode/ucc.git/
					mv ucc/BIN .
					rm -rf ucc
				fi
				mkdir builds logs files sources headers
				ucc --workspace .
				echo -e "${GREEN}Folder is ready for use as workspace!${NC}"
			;;

			*)
				inv_params
			;;
		esac
	;;

	"2")
		case "$1" in
			"-w"|"--workspace")
				cd $2
				echo $(pwd) > $ROOT_FILE
				echo -e "${YELLOW}INFO${NC}: Workspace directory set to $(cat $ROOT_FILE)"
				exit
			;;

			"-s"|"--specific")
				check_ws_defined
				if [ -f "$2" ]; then
					cp ${2} ${root}/sources/SPECIFIC-${2}
					ucc -b SPECIFIC-${2}
					rm ${root}/sources/SPECIFIC-${2}
				else
					echo -e "${RED}FATAL ERROR${NC}: $(pwd)/${2} does not exist!"
				fi
			;;

			"-sr"|"--specific-run")
				check_ws_defined
                		if [ -f "$2" ]; then
                			cp ${2} ${root}/sources/SPECIFIC-${2}
                			ucc -br SPECIFIC-${2}
					rm ${root}/sources/SPECIFIC-${2}
               			else
                    			echo -e "${RED}FATAL ERROR${NC}: $(pwd)/${2} does not exist!"
                		fi
			;;

			"-b"|"--build"|"-br"|"--build-run")
				check_ws_defined
				if [ -f "$root/sources/$2" ]; then
					echo -e "${YELLOW}INFO: Compiling and linking $2...${NC}"
					echo
					mkdir $root/.UCC
					mkdir $root/.UCC/TMPBUILDS
					cp $root/sources/$2 $root/.UCC/src.cpp
					SDL_VIDEODRIVER='dummy' dosbox -c MOUNT\ C\ "$root" -c C: -c cd\ BIN -c tcc\ -n..\\.UCC\\TMPBUI~1\\\ ..\\.UCC\\src.cpp\ GRAPHICS.LIB\>..\\logs\\TCC.LOG -c exit > $root/logs/UCC-BUILD.LOG
					if [ -z "$(ls $root/.UCC/TMPBUILDS)" ]; then
						build='failed'
						echo -e "${RED}!! build failed !!${NC}"
						echo
						echo -e "${YELLOW}INFO: Printing $root/logs/TCC.LOG${NC}"
						echo -e "${YELLOW}-------------------------------${NC}"
						cat $root/logs/TCC.LOG
						echo -e "${YELLOW}-------------------------------${NC}"
					else
						build='successful'
						echo -e "${GREEN}!! build successful !!${NC}"
						echo
						mv $root/.UCC/TMPBUILDS/*.EXE $root/builds/$2.EXE>&-
						echo "	~ Built with UCC ~" >> $root/logs/TCC.LOG
			
						if [ ! -z "$(cat $root/logs/TCC.LOG | grep 'Warning')" ]; then
							grep '^Warning' $root/logs/TCC.LOG > $root/.ucc/.__warnings
							echo -e "${YELLOW}INFO: Compiler warning(s) found in build: ${RED}"
							echo
							cat $root/.ucc/.__warnings
							echo -e "${NC}"
						fi
					fi
					
					rm -r $root/.UCC
					
					if [ "$1" = "-br" ] && [ "$build" = "successful" ]; then
						echo -e "${YELLOW}INFO: build-run flag detected, running $2"".EXE${NC}"
						ucc --run "$2"".EXE"
					fi
			
				else
					echo -e "${RED}FATAL ERROR${NC}: The file '$root/sources/$2' does not exist!"
				fi
			;;

			"-r"|"--run")
				check_ws_defined
				if [ -f "$root/builds/$2" ]; then
					cp $root/builds/$2 $root/files/$2
					cp $root/BIN/EGAVGA.BGI $root/files/
					tmpstr=${2%%.*}
					suffix="~1"
					if(( ${#2} > 6 )); then
						dosname="${tmpstr:0:6}"
						dosname="${dosname}${suffix}"
					else
						dosname="$tmpstr"
					fi
					echo -e "${YELLOW}INFO: Executing DOS file $dosname${NC}"
					dosbox -c MOUNT\ C\ "$root/files/" -c C: -c $dosname -c exit > $root/logs/UCC-RUN.LOG
					rm $root/files/$2 $root/files/EGAVGA.BGI
				else
					echo -e "${RED}FATAL ERROR${NC}: The file '$root/builds/$2' does not exist!"
				fi
			;;

			"-p"|"--boilerplate")
				check_ws_defined
				check_installed wget
				if [ ! -f "$root/sources/${2}.cpp" ]; then
					wget https://raw.githubusercontent.com/uditkarode/ucc/master/boilerplate -O $root/sources/${2}.cpp
					echo -e "${YELLOW}INFO: Boilerplate-added cpp file added as: $root/sources/${2}.cpp${NC}"
				else
					echo -e "${RED}ERROR: The file '$root/sources/${2}.cpp' already exists!${NC}"
				fi
			;;

			"-e"|"--edit-run")
				check_ws_defined
				vim $2.cpp
				ucc -br $2.cpp
			;;

			*)
				inv_params
			;;
		esac
	;;

	*)
		inv_params
	;;
esac
