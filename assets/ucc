#!/bin/bash

#   Copyright 2021 Udit Karode
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

VERSION=1.0 #stable-eol
cd ..
root="$PWD"

function show_help(){
	echo -e "Usage: ucc [option] [argument]\n"
	echo -e "ucc -b/--build <filename>: builds <filename> from the sources folder.\n"
	echo -e "ucc -r/--run <filename>: runs <filename> from the builds folder.\n"
	echo -e "ucc -br/--build-run <filename>: builds and runs <filename> from sources folder.\n"
	echo -e "ucc -cb/--c-boilerplate <filename>: places <filename> in sources folder with C boilerplate.\n"
	echo -e "ucc -cpb/--cpp-boilerplate <filename>: places <filename> in sources folder with CPP boilerplate.\n"
}

function inv_params(){
	echo -e "\nCommand not found. Use flag -h/--help for command list."
}

function check_exists(){
	if [ ! -f "$1" ]; then
		echo -e "\nFATAL ERROR: File $1 not found!\n"
		read -r
		exit
	fi
}

case "$#" in
	"0")
		show_help
	;;

	"1")
		case "$1" in
			"-v"|"--version")
				echo -e "\nUCC for Windows v${VERSION}\n"
				echo -e "Report bugs at github.com/uditkarode/ucc/issues"
			;;

			"-i"|"--init"|"init")
				mkdir builds logs files sources headers
				rm "$root/UCC-INIT.bat"
				echo -e "\nWorkspace initiated.\n"
			;;

			"-gb")
				echo -e "\nEnter the filename to compile:\n"
				read -r fn
				if [ -f "$root/sources/${fn}.txt" ]; then
					mv "$root/sources/${fn}.txt" "$root/sources/${fn}"
				fi
				check_exists "$root/sources/${fn}"
				cd "$root/assets" || exit
				./ucc --build "$fn"
			;;

			"-gr")
				echo -e "\nEnter the filename to run:\n"
				read -r fn
				check_exists "$root/builds/${fn}"
				cd "$root/assets" || exit
				./ucc --run "$fn"
			;;
			
			"-gbr")
				echo -e "\nEnter the filename to compile:\n"
				read -r fn
				if [ -f "$root/sources/${fn}.txt" ]; then
					mv "$root/sources/${fn}.txt" "$root/sources/${fn}"
				fi
				check_exists "$root/sources/${fn}"
				cd "$root/assets" || exit
				./ucc -br "$fn"
			;;

			"-h"|"--help")
				show_help
			;;

			*)
				inv_params
			;;
		esac
	;;

	"2")
		case "$1" in
			"--run")
				check_exists "$root/builds/${2}"
				cp "$root/builds/$2" "$root/files/RUN.EXE"
				cp "$root/BIN/EGAVGA.BGI" "$root/files/"
				echo -e "INFO: Executing DOS file $2"
				"$root/assets/dosbox" -noconsole -c "MOUNT C \"$root\"" -c "C:" -c "cd files" -c "RUN" -c "exit"
				rm "$root/files/RUN.EXE"
				rm "$root/files/EGAVGA.BGI"
			;;

			"-cb"|"--c-boilerplate")
				if [ ! -f "$root/assets/sources/$2" ]; then
					cp "$root/assets/.boilerplate.c" "$root/sources/$2"
					echo "C boilerplate added to $root/sources/$2"
				else
					echo -e "\nFATAL: $root/assets/$2 already exists."
				fi
			;;

			"-cpb"|"--cpp-boilerplate")
				if [ ! -f "$root/assets/sources/$2" ]; then
					cp "$root/assets/.boilerplate.cpp" "$root/sources/$2"
					echo "C++ boilerplate added to $root/assets/$2"
				else
					echo -e "\nFATAL: $root/assets/$2 already exists."
				fi
			;;
			
			"-b"|"--build"|"-br")
				check_exists "$root/sources/$2"
				echo
				echo "Compiling and linking $2..."
				echo
				mkdir "$root/.UCC"
				mkdir "$root/.UCC/TMPBUILDS"
				cp "$root/sources/$2" "$root/.UCC/src.cpp"
				export SDL_VIDEODRIVER="dummy"
				"$root/assets/dosbox" -noconsole -c "MOUNT C \"$root\"" -c "C:" -c "cd BIN" -c "tcc -n..\.UCC\TMPBUI~1\ ..\.UCC\src.cpp GRAPHICS.LIB > ..\logs\TCC.LOG" -c "exit"
				export SDL_VIDEODRIVER="directx"
				
				if [ -z "$(ls "$root"/.UCC/TMPBUILDS)" ]; then
					build='failed'
					echo -e "\n!! build failed !!"
					echo
					echo -e "\nINFO: Printing $root/logs/TCC.LOG\n"
					echo -e "-------------------------------\n"
					cat "$root/logs/TCC.LOG"
					echo -e "\n------------------------------"
				else
					build='successful'
					echo -e "!! build successful !!\n"
					echo
					mv "$root/.UCC/TMPBUILDS/*.EXE" "$root/builds/$2.EXE">&-
					echo "	~ Built with UCC ~" >> "$root/logs/TCC.LOG"
			
					if [ -n "$(cat "$root"/logs/TCC.LOG | grep 'Warning')" ]; then
						grep '^Warning' "$root/logs/TCC.LOG" > "$root/.UCC/.__warnings"
						echo -e "INFO: Compiler warning(s) found in build: "
						echo
						cat "$root/.UCC/.__warnings"
					fi
				fi
				
				rm -rf "$root/.UCC"
				if [ "$1" = "-br" ] && [ "$build" = "successful" ]; then
					echo -e "\nINFO: build-run flag detected, running $fn"".EXE\n"
					cd "$root/assets" || exit
					./ucc --run "$2"".EXE"
				fi
			;;

			*)
				inv_params
			;;
		esac
	;;

	*)
		inv_params
	;;
esac
