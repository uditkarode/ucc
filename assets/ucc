#!/bin/bash

#   Copyright 2018 Udit Karode
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either expressed or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.

VERSION=1.0 #stable-eol
cd ..

#For Microsoft Windows 7 or below
#root="  <PATH TO ACTUAL WORKSPACE FOLDER>  "

function show_help(){
	echo -e "Usage: ucc [option] [argument]\n"
	echo -e "ucc --build <filename>: builds <filename> from the sources folder.\n"
	echo -e "ucc --run <filename>: runs <filename> from the builds folder.\n"
}

function inv_params(){
	echo -e "\nCommand not found. Use flag --help for command list."
}

function check_exists(){
	if [ ! -f "$1" ]; then
		echo -e "\nFATAL ERROR: File not found!\n"
		exit
	fi
}

case "$#" in
	"0")
		show_help
	;;

	"1")
		case "$1" in
			"-v"|"--version")
				echo -e "\nUCC for Windows v${VERSION}\n"
			;;

			"-i"|"--init"|"init")
				mkdir builds logs files sources headers
				rm $root/UCC-INIT.bat
				echo -e "\nWorkspace initiated.\n"
			;;

			"-gb")
				echo -e "\nEnter the filename to compile:\n"
				read fn
				if [ -f "$root/sources/${fn}.txt" ]; then
					mv $root/sources/${fn}.txt $root/sources/${fn}
				fi
				check_exists $root/sources/${fn}
				cd assets
				./ucc --build $fn
			;;

			"-gr")
				echo -e "\nEnter the filename to run:\n"
				read fn
				check_exists $root/builds/${fn}
				cd $root/assets
				./ucc --run $fn
			;;
			
			"-gbr")
				echo -e "\nEnter the filename to compile:\n"
				read fn
				if [ -f "$root/sources/${fn}.txt" ]; then
					mv $root/sources/${fn}.txt $root/sources/${fn}
				fi
				check_exists $root/sources/${fn}
				cd assets
				./ucc -br $fn
			;;

			"-h"|"--help")
				show_help
			;;

			*)
				inv_params
			;;
		esac
	;;

	"2")
		case "$1" in
			"--run")
				check_exists $root/builds/${2}
				cp $root/builds/$2 $root/files/RUN.EXE
				cp $root/BIN/EGAVGA.BGI $root/files/
				echo -e "INFO: Executing DOS file $2"
				$root/assets/dosbox -noconsole -c MOUNT\ C\ "$root" -c C: -c cd\ files -c RUN -c exit
				rm $root/files/RUN.EXE
				rm $root/files/EGAVGA.BGI
			;;
			
			"-b"|"--build"|"-br")
				echo
				mkdir $root/.UCC
				mkdir $root/.UCC/TMPBUILDS
				cp $root/sources/$2 $root/.UCC/src.cpp
				export SDL_VIDEODRIVER="dummy"
				$root/assets/dosbox -noconsole -c MOUNT\ C\ "$root" -c C: -c cd\ BIN -c tcc\ -n..\\.UCC\\TMPBUI~1\\\ ..\\.UCC\\src.cpp\ GRAPHICS.LIB\>..\\logs\\TCC.LOG -c exit
				export SDL_VIDEODRIVER="directx"
				
				if [ -z "$(ls $root/.UCC/TMPBUILDS)" ]; then
					build='failed'
					echo -e "\n!! build failed !!"
					echo
					echo -e "\nINFO: Printing $root/logs/TCC.LOG\n"
					echo -e "-------------------------------\n"
					cat $root/logs/TCC.LOG
					echo -e "\n------------------------------"
				else
					build='successful'
					echo -e "!! build successful !!\n"
					echo
					mv $root/.UCC/TMPBUILDS/*.EXE $root/builds/$2.EXE>&-
					echo "	~ Built with UCC ~" >> $root/logs/TCC.LOG
			
					if [ ! -z "$(cat $root/logs/TCC.LOG | grep 'Warning')" ]; then
						grep '^Warning' $root/logs/TCC.LOG > $root/.ucc/.__warnings
						echo -e "INFO: Compiler warning(s) found in build: "
						echo
						cat $root/.ucc/.__warnings
					fi
				fi
				
				rm -rf $root/.UCC
				if [ "$1" = "-br" ] && [ "$build" = "successful" ]; then
					echo -e "\nINFO: build-run flag detected, running $fn"".EXE\n"
					cd $root/assets
					./ucc --run "$2"".EXE"
				fi
			;;

			*)
				inv_params
			;;
		esac
	;;

	*)
		inv_params
	;;
esac
